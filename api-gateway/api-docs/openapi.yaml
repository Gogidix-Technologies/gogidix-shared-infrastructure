openapi: 3.0.3
info:
  title: Social Ecommerce Ecosystem API Gateway
  description: |
    OpenAPI documentation for the Micro-Social-Ecommerce-Ecosystem API Gateway.
    This API Gateway serves as the entry point for all client applications to access the various microservices.
  version: 1.0.0
  contact:
    name: Social Ecommerce Development Team
    email: api-support@socialecommerce.example.com
  license:
    name: Proprietary
servers:
  - url: http://localhost:8080
    description: Local Development Server
  - url: https://api.socialecommerce.example.com
    description: Production Server
tags:
  - name: auth
    description: Authentication and Authorization endpoints
  - name: users
    description: User management and profile operations
  - name: products
    description: Product catalog and management
  - name: orders
    description: Order processing and management
  - name: marketplace
    description: Marketplace and vendor operations
  - name: social
    description: Social media integrations and features
  - name: tracking
    description: Order tracking and shipment information
  - name: actuator
    description: System monitoring and management endpoints

paths:
  # Authentication service paths
  /auth/login:
    post:
      tags:
        - auth
      summary: User login
      description: Authenticate a user and return a JWT token
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successful authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JwtResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Too many requests - rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/register:
    post:
      tags:
        - auth
      summary: User registration
      description: Register a new user account
      operationId: register
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegistrationRequest'
      responses:
        '201':
          description: User successfully registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JwtResponse'
        '400':
          description: Invalid registration data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/refresh:
    post:
      tags:
        - auth
      summary: Refresh token
      description: Refresh an expired JWT token using a refresh token
      operationId: refreshToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
      responses:
        '200':
          description: Token successfully refreshed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefreshResponse'
        '403':
          description: Invalid refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/logout:
    post:
      tags:
        - auth
      summary: User logout
      description: Invalidate the current user's refresh token
      operationId: logout
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
      responses:
        '200':
          description: Successfully logged out
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # User service paths
  /users:
    get:
      tags:
        - users
      summary: Get all users
      description: Retrieve a list of all users (admin only)
      operationId: getAllUsers
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number (zero-based)
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          description: Page size
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: List of users retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  page:
                    type: integer
                  size:
                    type: integer
                  totalElements:
                    type: integer
                  totalPages:
                    type: integer
        '403':
          description: Forbidden - insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/{id}:
    get:
      tags:
        - users
      summary: Get user by ID
      description: Retrieve a specific user by their ID
      operationId: getUserById
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '403':
          description: Forbidden - insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags:
        - users
      summary: Update user
      description: Update a user's information
      operationId: updateUser
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid user data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags:
        - users
      summary: Delete user
      description: Delete a user (admin only)
      operationId: deleteUser
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '403':
          description: Forbidden - insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Product service paths
  /products:
    get:
      tags:
        - products
      summary: Get all products
      description: Retrieve a list of all products with pagination and filtering
      operationId: getAllProducts
      parameters:
        - name: page
          in: query
          description: Page number (zero-based)
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          description: Page size
          schema:
            type: integer
            default: 10
        - name: category
          in: query
          description: Filter by category
          schema:
            type: string
        - name: minPrice
          in: query
          description: Minimum price filter
          schema:
            type: number
            format: double
        - name: maxPrice
          in: query
          description: Maximum price filter
          schema:
            type: number
            format: double
        - name: sortBy
          in: query
          description: Sort field
          schema:
            type: string
            enum: [name, price, createdAt]
            default: createdAt
        - name: sortDirection
          in: query
          description: Sort direction
          schema:
            type: string
            enum: [asc, desc]
            default: desc
      responses:
        '200':
          description: List of products retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
                  page:
                    type: integer
                  size:
                    type: integer
                  totalElements:
                    type: integer
                  totalPages:
                    type: integer
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      tags:
        - products
      summary: Create product
      description: Create a new product (vendor/admin only)
      operationId: createProduct
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductRequest'
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Invalid product data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /products/{id}:
    get:
      tags:
        - products
      summary: Get product by ID
      description: Retrieve a specific product by its ID
      operationId: getProductById
      parameters:
        - name: id
          in: path
          description: Product ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Product retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags:
        - products
      summary: Update product
      description: Update a product's information (vendor/admin only)
      operationId: updateProduct
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: Product ID
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductRequest'
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Invalid product data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags:
        - products
      summary: Delete product
      description: Delete a product (vendor/admin only)
      operationId: deleteProduct
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: Product ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Product deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '403':
          description: Forbidden - insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Order service paths
  /orders:
    get:
      tags:
        - orders
      summary: Get user orders
      description: Retrieve a list of orders for the current user
      operationId: getUserOrders
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number (zero-based)
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          description: Page size
          schema:
            type: integer
            default: 10
        - name: status
          in: query
          description: Filter by order status
          schema:
            type: string
            enum: [PENDING, PROCESSING, SHIPPED, DELIVERED, CANCELLED]
      responses:
        '200':
          description: List of orders retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/Order'
                  page:
                    type: integer
                  size:
                    type: integer
                  totalElements:
                    type: integer
                  totalPages:
                    type: integer
        '403':
          description: Forbidden - not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      tags:
        - orders
      summary: Create order
      description: Create a new order
      operationId: createOrder
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderRequest'
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid order data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /orders/{id}:
    get:
      tags:
        - orders
      summary: Get order by ID
      description: Retrieve a specific order by its ID
      operationId: getOrderById
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: Order ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Order retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '403':
          description: Forbidden - insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags:
        - orders
      summary: Update order
      description: Update an order's status (admin/vendor only)
      operationId: updateOrder
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: Order ID
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderStatusUpdateRequest'
      responses:
        '200':
          description: Order updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid order data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags:
        - orders
      summary: Cancel order
      description: Cancel an order (if eligible)
      operationId: cancelOrder
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: Order ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Order cancelled successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '400':
          description: Order not eligible for cancellation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Tracking service paths
  /tracking/{trackingNumber}:
    get:
      tags:
        - tracking
      summary: Track shipment
      description: Get shipment tracking information by tracking number
      operationId: trackShipment
      parameters:
        - name: trackingNumber
          in: path
          description: Shipment tracking number
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Tracking information retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrackingInfo'
        '404':
          description: Tracking number not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Social integration paths
  /social/share:
    post:
      tags:
        - social
      summary: Share product
      description: Share a product on social media
      operationId: shareProduct
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SocialShareRequest'
      responses:
        '200':
          description: Product shared successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '400':
          description: Invalid share request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Marketplace paths
  /marketplace/vendors:
    get:
      tags:
        - marketplace
      summary: Get vendors
      description: Retrieve a list of vendors with pagination and filtering
      operationId: getVendors
      parameters:
        - name: page
          in: query
          description: Page number (zero-based)
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          description: Page size
          schema:
            type: integer
            default: 10
        - name: category
          in: query
          description: Filter by category
          schema:
            type: string
        - name: rating
          in: query
          description: Minimum rating filter
          schema:
            type: number
            format: double
      responses:
        '200':
          description: List of vendors retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/Vendor'
                  page:
                    type: integer
                  size:
                    type: integer
                  totalElements:
                    type: integer
                  totalPages:
                    type: integer
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /marketplace/vendors/{id}:
    get:
      tags:
        - marketplace
      summary: Get vendor by ID
      description: Retrieve a specific vendor by their ID
      operationId: getVendorById
      parameters:
        - name: id
          in: path
          description: Vendor ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Vendor retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vendor'
        '404':
          description: Vendor not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /marketplace/vendors/{id}/products:
    get:
      tags:
        - marketplace
      summary: Get vendor products
      description: Retrieve products for a specific vendor
      operationId: getVendorProducts
      parameters:
        - name: id
          in: path
          description: Vendor ID
          required: true
          schema:
            type: integer
            format: int64
        - name: page
          in: query
          description: Page number (zero-based)
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          description: Page size
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: List of vendor products retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
                  page:
                    type: integer
                  size:
                    type: integer
                  totalElements:
                    type: integer
                  totalPages:
                    type: integer
        '404':
          description: Vendor not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Actuator endpoints
  /actuator/health:
    get:
      tags:
        - actuator
      summary: Health check
      description: Check the health of the API Gateway and its dependencies
      operationId: healthCheck
      responses:
        '200':
          description: System is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [UP, DOWN, UNKNOWN]
                  components:
                    type: object
                    additionalProperties:
                      type: object
                      properties:
                        status:
                          type: string
                          enum: [UP, DOWN, UNKNOWN]

  /actuator/info:
    get:
      tags:
        - actuator
      summary: System information
      description: Get information about the API Gateway
      operationId: systemInfo
      responses:
        '200':
          description: System information retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  app:
                    type: object
                    properties:
                      name:
                        type: string
                      description:
                        type: string
                      version:
                        type: string

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    LoginRequest:
      type: object
      required:
        - usernameOrEmail
        - password
      properties:
        usernameOrEmail:
          type: string
          example: "john.doe@example.com"
        password:
          type: string
          format: password
          example: "password123"

    RegistrationRequest:
      type: object
      required:
        - username
        - firstName
        - lastName
        - email
        - password
      properties:
        username:
          type: string
          example: "johndoe"
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Doe"
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        password:
          type: string
          format: password
          example: "password123"
        phoneNumber:
          type: string
          example: "+1234567890"
        roles:
          type: array
          items:
            type: string
            enum: [USER, VENDOR, ADMIN]
          example: ["USER"]

    JwtResponse:
      type: object
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string
        tokenType:
          type: string
          example: "Bearer"
        id:
          type: integer
          format: int64
        username:
          type: string
        email:
          type: string
        roles:
          type: array
          items:
            type: string
        expiresIn:
          type: integer
          format: int64

    TokenRefreshRequest:
      type: object
      required:
        - refreshToken
      properties:
        refreshToken:
          type: string

    TokenRefreshResponse:
      type: object
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string
        tokenType:
          type: string
          example: "Bearer"
        expiresIn:
          type: integer
          format: int64

    MessageResponse:
      type: object
      properties:
        message:
          type: string
        success:
          type: boolean

    ErrorResponse:
      type: object
      properties:
        message:
          type: string
        success:
          type: boolean
          example: false
        timestamp:
          type: string
          format: date-time
        status:
          type: integer
          format: int32
        errors:
          type: array
          items:
            type: string

    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        enabled:
          type: boolean
        phoneNumber:
          type: string
        profileImageUrl:
          type: string
        roles:
          type: array
          items:
            $ref: '#/components/schemas/Role'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        lastLoginAt:
          type: string
          format: date-time

    Role:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        permissions:
          type: array
          items:
            type: string

    Product:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        price:
          type: number
          format: double
        discountedPrice:
          type: number
          format: double
        stockQuantity:
          type: integer
        category:
          type: string
        images:
          type: array
          items:
            type: string
        vendor:
          $ref: '#/components/schemas/Vendor'
        isActive:
          type: boolean
        rating:
          type: number
          format: double
        reviewCount:
          type: integer
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    ProductRequest:
      type: object
      required:
        - name
        - description
        - price
        - stockQuantity
        - category
      properties:
        name:
          type: string
          example: "Smartphone XYZ"
        description:
          type: string
          example: "Latest smartphone with amazing features"
        price:
          type: number
          format: double
          example: 699.99
        discountedPrice:
          type: number
          format: double
          example: 649.99
        stockQuantity:
          type: integer
          example: 100
        category:
          type: string
          example: "Electronics"
        images:
          type: array
          items:
            type: string
          example: ["image1.jpg", "image2.jpg"]
        isActive:
          type: boolean
          example: true

    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
        orderNumber:
          type: string
        user:
          $ref: '#/components/schemas/User'
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
        totalAmount:
          type: number
          format: double
        status:
          type: string
          enum: [PENDING, PROCESSING, SHIPPED, DELIVERED, CANCELLED]
        shippingAddress:
          $ref: '#/components/schemas/Address'
        billingAddress:
          $ref: '#/components/schemas/Address'
        paymentMethod:
          type: string
        paymentStatus:
          type: string
          enum: [PENDING, PAID, FAILED, REFUNDED]
        trackingNumber:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    OrderItem:
      type: object
      properties:
        id:
          type: integer
          format: int64
        product:
          $ref: '#/components/schemas/Product'
        quantity:
          type: integer
        price:
          type: number
          format: double
        discount:
          type: number
          format: double
        totalPrice:
          type: number
          format: double

    OrderRequest:
      type: object
      required:
        - items
        - shippingAddress
        - paymentMethod
      properties:
        items:
          type: array
          items:
            type: object
            properties:
              productId:
                type: integer
                format: int64
              quantity:
                type: integer
          example:
            - productId: 1
              quantity: 2
            - productId: 3
              quantity: 1
        shippingAddress:
          $ref: '#/components/schemas/Address'
        billingAddress:
          $ref: '#/components/schemas/Address'
        paymentMethod:
          type: string
          example: "CREDIT_CARD"
        notes:
          type: string
          example: "Please deliver before 5 PM"

    OrderStatusUpdateRequest:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum: [PENDING, PROCESSING, SHIPPED, DELIVERED, CANCELLED]
        trackingNumber:
          type: string
        notes:
          type: string

    Address:
      type: object
      required:
        - fullName
        - streetAddress
        - city
        - zipCode
        - country
      properties:
        id:
          type: integer
          format: int64
        fullName:
          type: string
          example: "John Doe"
        streetAddress:
          type: string
          example: "123 Main St"
        streetAddress2:
          type: string
          example: "Apt 4B"
        city:
          type: string
          example: "New York"
        state:
          type: string
          example: "NY"
        zipCode:
          type: string
          example: "10001"
        country:
          type: string
          example: "USA"
        phoneNumber:
          type: string
          example: "+1234567890"
        isDefault:
          type: boolean
          example: true

    Vendor:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        logo:
          type: string
        address:
          $ref: '#/components/schemas/Address'
        contactEmail:
          type: string
          format: email
        contactPhone:
          type: string
        websiteUrl:
          type: string
          format: uri
        categories:
          type: array
          items:
            type: string
        rating:
          type: number
          format: double
        reviewCount:
          type: integer
        isVerified:
          type: boolean
        status:
          type: string
          enum: [ACTIVE, SUSPENDED, PENDING_REVIEW]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    TrackingInfo:
      type: object
      properties:
        trackingNumber:
          type: string
        carrier:
          type: string
        status:
          type: string
          enum: [PENDING, IN_TRANSIT, OUT_FOR_DELIVERY, DELIVERED, EXCEPTION]
        estimatedDelivery:
          type: string
          format: date
        shipDate:
          type: string
          format: date
        deliveryDate:
          type: string
          format: date
        origin:
          type: string
        destination:
          type: string
        events:
          type: array
          items:
            type: object
            properties:
              timestamp:
                type: string
                format: date-time
              location:
                type: string
              status:
                type: string
              description:
                type: string

    SocialShareRequest:
      type: object
      required:
        - productId
        - platform
      properties:
        productId:
          type: integer
          format: int64
          example: 1
        platform:
          type: string
          enum: [FACEBOOK, TWITTER, INSTAGRAM, PINTEREST, LINKEDIN]
          example: "FACEBOOK"
        message:
          type: string
          example: "Check out this amazing product!"
