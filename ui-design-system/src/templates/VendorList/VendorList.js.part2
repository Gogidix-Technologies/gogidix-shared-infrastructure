/**
 * VendorList Template (Part 2)
 * 
 * This part contains:
 * - Search bar component
 * - Filter sidebar component
 * - Sorting dropdown component
 * 
 * @module templates/VendorList
 * @requires utilities/localization
 * @requires utilities/design-tokens
 */

// Dependencies are included in Part 1
// const { getLocaleDirection, getTranslation } = require('../../utilities/localization');
// const { colors, spacing, typography } = require('../../utilities/design-tokens');

/**
 * SearchBar Component
 * 
 * Provides search functionality for vendors
 * 
 * @param {Object} props - Component props
 * @param {string} props.query - Current search query
 * @param {string} props.locale - Locale code
 * @returns {string} HTML for search bar
 */
function SearchBar({ query = '', locale = 'en-US' }) {
  const direction = getLocaleDirection(locale);
  const rtlClass = direction === 'rtl' ? 'vendor-search--rtl' : '';
  
  return `
    <div class="vendor-search ${rtlClass}">
      <form class="vendor-search__form" data-action="search-vendors">
        <div class="vendor-search__input-container">
          <svg class="vendor-search__icon" xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <circle cx="11" cy="11" r="8"></circle>
            <line x1="21" y1="21" x2="16.65" y2="16.65"></line>
          </svg>
          <input
            type="text"
            class="vendor-search__input"
            placeholder="${getTranslation('vendor.searchPlaceholder', locale) || 'Search vendors...'}"
            value="${query}"
            name="vendor-search-query"
            aria-label="${getTranslation('vendor.search', locale) || 'Search vendors'}"
          />
          ${query ? `
            <button type="button" class="vendor-search__clear" aria-label="${getTranslation('vendor.clearSearch', locale) || 'Clear search'}">
              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <line x1="18" y1="6" x2="6" y2="18"></line>
                <line x1="6" y1="6" x2="18" y2="18"></line>
              </svg>
            </button>
          ` : ''}
        </div>
        <button type="submit" class="vendor-search__button">
          ${getTranslation('vendor.search', locale) || 'Search'}
        </button>
      </form>
    </div>
  `;
}

/**
 * SortSelector Component
 * 
 * Provides sorting options for vendor list
 * 
 * @param {Object} props - Component props
 * @param {string} props.currentSort - Current sort option
 * @param {string} props.locale - Locale code
 * @returns {string} HTML for sort selector
 */
function SortSelector({ currentSort = 'recommended', locale = 'en-US' }) {
  const direction = getLocaleDirection(locale);
  const rtlClass = direction === 'rtl' ? 'vendor-sort--rtl' : '';
  
  const sortOptions = [
    { value: 'recommended', label: getTranslation('vendor.sortRecommended', locale) || 'Recommended' },
    { value: 'rating', label: getTranslation('vendor.sortRating', locale) || 'Highest Rating' },
    { value: 'newest', label: getTranslation('vendor.sortNewest', locale) || 'Newest' },
    { value: 'name_asc', label: getTranslation('vendor.sortNameAsc', locale) || 'Name (A-Z)' },
    { value: 'name_desc', label: getTranslation('vendor.sortNameDesc', locale) || 'Name (Z-A)' }
  ];
  
  return `
    <div class="vendor-sort ${rtlClass}">
      <label class="vendor-sort__label" for="vendor-sort-select">
        ${getTranslation('vendor.sortBy', locale) || 'Sort by:'}
      </label>
      <div class="vendor-sort__select-container">
        <select id="vendor-sort-select" class="vendor-sort__select" data-action="sort-vendors">
          ${sortOptions.map(option => 
            `<option value="${option.value}" ${currentSort === option.value ? 'selected' : ''}>${option.label}</option>`
          ).join('')}
        </select>
        <svg class="vendor-sort__arrow" xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <polyline points="6 9 12 15 18 9"></polyline>
        </svg>
      </div>
    </div>
  `;
}

/**
 * FilterGroup Component
 * 
 * Creates a filter group with a title and filter options
 * 
 * @param {Object} props - Component props
 * @param {string} props.title - Title of filter group
 * @param {Array} props.options - Filter options
 * @param {string|Array} props.selectedValues - Currently selected values
 * @param {string} props.name - Name attribute for inputs
 * @param {string} props.type - Filter type (checkbox or radio)
 * @param {string} props.locale - Locale code
 * @returns {string} HTML for filter group
 */
function FilterGroup({ 
  title, 
  options = [], 
  selectedValues = [], 
  name, 
  type = 'checkbox', 
  locale = 'en-US' 
}) {
  const direction = getLocaleDirection(locale);
  const rtlClass = direction === 'rtl' ? 'vendor-filter-group--rtl' : '';
  
  // Convert selectedValues to array if it's a string
  if (typeof selectedValues === 'string') {
    selectedValues = [selectedValues];
  }
  
  return `
    <div class="vendor-filter-group ${rtlClass}">
      <h4 class="vendor-filter-group__title">${title}</h4>
      <div class="vendor-filter-group__options">
        ${options.map(option => {
          const isChecked = selectedValues.includes(option.value);
          const inputId = `filter-${name}-${option.value}`;
          
          return `
            <div class="vendor-filter-group__option">
              <input 
                type="${type}" 
                id="${inputId}" 
                name="${name}" 
                value="${option.value}" 
                class="vendor-filter-group__input" 
                ${isChecked ? 'checked' : ''}
                data-filter-group="${name}"
              />
              <label for="${inputId}" class="vendor-filter-group__label">
                ${option.label}
                ${option.count !== undefined ? `<span class="vendor-filter-group__count">(${option.count})</span>` : ''}
              </label>
            </div>
          `;
        }).join('')}
      </div>
    </div>
  `;
}

/**
 * FilterSidebar Component
 * 
 * Creates sidebar with various filter options for vendors
 * 
 * @param {Object} props - Component props
 * @param {Object} props.filters - Current filters
 * @param {Array} props.categories - Available categories
 * @param {Array} props.featuredOptions - Featured filter options
 * @param {Array} props.ratingOptions - Rating filter options
 * @param {Array} props.locationOptions - Location filter options
 * @param {string} props.locale - Locale code
 * @returns {string} HTML for filter sidebar
 */
function FilterSidebar({
  filters = {},
  categories = [],
  featuredOptions = [],
  ratingOptions = [],
  locationOptions = [],
  locale = 'en-US'
}) {
  const direction = getLocaleDirection(locale);
  const rtlClass = direction === 'rtl' ? 'vendor-filters--rtl' : '';
  
  // Default filter options if not provided
  if (!featuredOptions.length) {
    featuredOptions = [
      { value: 'featured', label: getTranslation('vendor.featured', locale) || 'Featured', count: 5 },
      { value: 'verified', label: getTranslation('vendor.verified', locale) || 'Verified', count: 12 }
    ];
  }
  
  if (!ratingOptions.length) {
    ratingOptions = [
      { value: '4', label: getTranslation('vendor.fourStarsAndAbove', locale) || '4 Stars & Above', count: 15 },
      { value: '3', label: getTranslation('vendor.threeStarsAndAbove', locale) || '3 Stars & Above', count: 25 },
      { value: '2', label: getTranslation('vendor.twoStarsAndAbove', locale) || '2 Stars & Above', count: 30 }
    ];
  }
  
  return `
    <aside class="vendor-filters ${rtlClass}">
      <div class="vendor-filters__header">
        <h3 class="vendor-filters__title">${getTranslation('vendor.filters', locale) || 'Filters'}</h3>
        
        <button class="vendor-filters__clear" data-action="clear-all-filters">
          ${getTranslation('vendor.clearAll', locale) || 'Clear All'}
        </button>
      </div>
      
      <div class="vendor-filters__body">
        ${categories.length > 0 ? FilterGroup({
          title: getTranslation('vendor.categories', locale) || 'Categories',
          options: categories,
          selectedValues: filters.categories || [],
          name: 'categories',
          type: 'checkbox',
          locale
        }) : ''}
        
        ${FilterGroup({
          title: getTranslation('vendor.featured', locale) || 'Featured',
          options: featuredOptions,
          selectedValues: filters.featured || [],
          name: 'featured',
          type: 'checkbox',
          locale
        })}
        
        ${FilterGroup({
          title: getTranslation('vendor.rating', locale) || 'Rating',
          options: ratingOptions,
          selectedValues: filters.rating || '',
          name: 'rating',
          type: 'radio',
          locale
        })}
        
        ${locationOptions.length > 0 ? FilterGroup({
          title: getTranslation('vendor.location', locale) || 'Location',
          options: locationOptions,
          selectedValues: filters.location || [],
          name: 'location',
          type: 'checkbox',
          locale
        }) : ''}
      </div>
      
      <div class="vendor-filters__footer">
        <button class="vendor-filters__apply" data-action="apply-filters">
          ${getTranslation('vendor.applyFilters', locale) || 'Apply Filters'}
        </button>
      </div>
    </aside>
  `;
}
