  // Create sorting controls
  let sortingHtml = '';
  if (allowSorting) {
    const sortOptions = [
      { value: 'newest', label: translations.sortNewest },
      { value: 'oldest', label: translations.sortOldest },
      { value: 'highestRated', label: translations.sortHighestRated },
      { value: 'lowestRated', label: translations.sortLowestRated },
      { value: 'mostHelpful', label: translations.sortMostHelpful },
    ];
    
    sortingHtml = `
      <div class="reviews-sorting" style="
        display: flex;
        align-items: center;
        margin-bottom: ${tokens.spacing.md};
      ">
        <label for="${sectionId}-sort" style="
          font-size: ${tokens.typography.textStyles.bodyMedium.fontSize};
          margin-${dir === 'rtl' ? 'left' : 'right'}: ${tokens.spacing.sm};
        ">
          ${translations.sortBy}:
        </label>
        <select
          id="${sectionId}-sort"
          onchange="handleSortChange('${sectionId}', this.value)"
          style="
            padding: ${tokens.spacing.xs} ${tokens.spacing.md};
            border: ${tokens.borders.presets.input.normal};
            border-radius: ${tokens.borders.borderRadius.md};
            font-family: inherit;
            appearance: none;
            background-image: url('data:image/svg+xml;utf8,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><polyline points=\"6 9 12 15 18 9\"></polyline></svg>');
            background-repeat: no-repeat;
            background-position: right ${tokens.spacing.sm} center;
            background-size: 16px;
            padding-right: ${tokens.spacing.xl};
          "
        >
          ${sortOptions.map(option => `
            <option 
              value="${option.value}" 
              ${option.value === defaultSort ? 'selected' : ''}
            >
              ${option.label}
            </option>
          `).join('')}
        </select>
      </div>
    `;
  }
  
  // Create filtering controls
  let filteringHtml = '';
  if (allowFiltering) {
    filteringHtml = `
      <div class="reviews-filtering" style="
        display: flex;
        flex-wrap: wrap;
        gap: ${tokens.spacing.sm};
        margin-bottom: ${tokens.spacing.lg};
      ">
        <button
          class="filter-btn active"
          onclick="handleFilterChange('${sectionId}', 'all')"
          style="
            border: none;
            background: ${tokens.colors.neutral.gray[200]};
            color: ${tokens.colors.neutral.gray[900]};
            padding: ${tokens.spacing.xs} ${tokens.spacing.md};
            border-radius: ${tokens.borders.borderRadius.full};
            font-family: inherit;
            font-size: ${tokens.typography.textStyles.bodySmall.fontSize};
            cursor: pointer;
            transition: background-color 0.2s;
            
            &:hover {
              background: ${tokens.colors.neutral.gray[300]};
            }
            
            &.active {
              background: ${tokens.colors.brand.primary[600]};
              color: white;
            }
          "
        >
          ${translations.allRatings}
        </button>
        
        ${[5, 4, 3, 2, 1].map(star => `
          <button
            class="filter-btn"
            onclick="handleFilterChange('${sectionId}', ${star})"
            style="
              border: none;
              background: ${tokens.colors.neutral.gray[200]};
              color: ${tokens.colors.neutral.gray[900]};
              padding: ${tokens.spacing.xs} ${tokens.spacing.md};
              border-radius: ${tokens.borders.borderRadius.full};
              font-family: inherit;
              font-size: ${tokens.typography.textStyles.bodySmall.fontSize};
              cursor: pointer;
              transition: background-color 0.2s;
              
              &:hover {
                background: ${tokens.colors.neutral.gray[300]};
              }
              
              &.active {
                background: ${tokens.colors.brand.primary[600]};
                color: white;
              }
            "
          >
            ${star} <i class="icon-star-filled" style="font-size: 0.8em;"></i>
          </button>
        `).join('')}
        
        <button
          class="filter-btn"
          onclick="handleFilterChange('${sectionId}', 'withMedia')"
          style="
            border: none;
            background: ${tokens.colors.neutral.gray[200]};
            color: ${tokens.colors.neutral.gray[900]};
            padding: ${tokens.spacing.xs} ${tokens.spacing.md};
            border-radius: ${tokens.borders.borderRadius.full};
            font-family: inherit;
            font-size: ${tokens.typography.textStyles.bodySmall.fontSize};
            cursor: pointer;
            transition: background-color 0.2s;
            
            &:hover {
              background: ${tokens.colors.neutral.gray[300]};
            }
            
            &.active {
              background: ${tokens.colors.brand.primary[600]};
              color: white;
            }
          "
        >
          ${translations.withImages}
        </button>
        
        <button
          class="filter-btn"
          onclick="handleFilterChange('${sectionId}', 'verified')"
          style="
            border: none;
            background: ${tokens.colors.neutral.gray[200]};
            color: ${tokens.colors.neutral.gray[900]};
            padding: ${tokens.spacing.xs} ${tokens.spacing.md};
            border-radius: ${tokens.borders.borderRadius.full};
            font-family: inherit;
            font-size: ${tokens.typography.textStyles.bodySmall.fontSize};
            cursor: pointer;
            transition: background-color 0.2s;
            
            &:hover {
              background: ${tokens.colors.neutral.gray[300]};
            }
            
            &.active {
              background: ${tokens.colors.brand.primary[600]};
              color: white;
            }
          "
        >
          ${translations.verifiedPurchases}
        </button>
      </div>
    `;
  }
  
  // Create reviews list
  let reviewsHtml = '';
  if (reviews.length === 0) {
    reviewsHtml = `
      <div class="reviews-empty" style="
        padding: ${tokens.spacing.lg};
        text-align: center;
        background: ${tokens.colors.neutral.gray[100]};
        border-radius: ${tokens.borders.borderRadius.md};
        margin-bottom: ${tokens.spacing.lg};
      ">
        <i class="icon-review" style="
          font-size: 2rem;
          color: ${tokens.colors.neutral.gray[400]};
          margin-bottom: ${tokens.spacing.sm};
          display: block;
        "></i>
        <p style="
          margin: 0;
          color: ${tokens.colors.neutral.gray[600]};
        ">
          ${translations.noReviews}
        </p>
      </div>
    `;
  } else {
    reviewsHtml = `
      <div class="reviews-list" style="
        display: flex;
        flex-direction: column;
        gap: ${tokens.spacing.xl};
      ">
        ${reviews.map(review => {
          return Review({
            ...review,
            locale
          });
        }).join('')}
      </div>
    `;
  }
  
  // Create pagination if needed
  let paginationHtml = '';
  if (totalReviews > reviews.length) {
    paginationHtml = `
      <div class="reviews-pagination" style="
        display: flex;
        justify-content: center;
        margin-top: ${tokens.spacing.xl};
      ">
        <button
          onclick="loadMoreReviews('${sectionId}')"
          style="
            background: none;
            border: 1px solid ${tokens.colors.neutral.gray[300]};
            color: ${tokens.colors.neutral.gray[900]};
            padding: ${tokens.spacing.sm} ${tokens.spacing.lg};
            border-radius: ${tokens.borders.borderRadius.md};
            font-family: inherit;
            cursor: pointer;
            transition: all 0.2s;
            
            &:hover {
              border-color: ${tokens.colors.brand.primary[500]};
              color: ${tokens.colors.brand.primary[600]};
            }
          "
        >
          ${translations.loadMore}
        </button>
      </div>
    `;
  }
  
  // Build the complete reviews section
  return `
    <section 
      id="${sectionId}" 
      class="reviews-section ${className}" 
      dir="${dir}"
      ${Object.entries(otherProps).map(([key, value]) => `${key}="${value}"`).join(' ')}
    >
      ${reviewSummary}
      
      <div class="reviews-controls" style="
        display: flex;
        flex-wrap: wrap;
        justify-content: space-between;
        align-items: center;
        margin-bottom: ${tokens.spacing.md};
      ">
        <h3 style="
          font-size: ${tokens.typography.textStyles.heading4.fontSize};
          font-weight: ${tokens.typography.fontWeights.semiBold};
          margin: 0;
        ">
          ${totalCount > 0 ? translations.customerReviews : ''}
        </h3>
        
        <div>
          ${sortingHtml}
        </div>
      </div>
      
      ${filteringHtml}
      
      ${reviewsHtml}
      
      ${paginationHtml}
      
      <script>
        // Handle review form display
        function showReviewForm(sectionId) {
          // Implementation would be injected by the application
          console.log('Show review form for section:', sectionId);
        }
        
        // Event handlers
        function handleSortChange(sectionId, sortValue) {
          ${onSortChange ? `
            // Custom handler would be injected here
            console.log('Sort changed:', sectionId, sortValue);
          ` : ''}
        }
        
        function handleFilterChange(sectionId, filterValue) {
          ${onFilterChange ? `
            // Update active class on filter buttons
            const filterButtons = document.querySelectorAll(\`#\${sectionId} .filter-btn\`);
            filterButtons.forEach(btn => {
              btn.classList.remove('active');
            });
            
            // Find the clicked button and add active class
            let clickedButton;
            if (filterValue === 'all') {
              clickedButton = document.querySelector(\`#\${sectionId} .filter-btn:first-child\`);
            } else if (filterValue === 'withMedia') {
              clickedButton = [...filterButtons].find(btn => btn.textContent.trim().includes(translations.withImages));
            } else if (filterValue === 'verified') {
              clickedButton = [...filterButtons].find(btn => btn.textContent.trim().includes(translations.verifiedPurchases));
            } else {
              // This is a star rating filter
              clickedButton = [...filterButtons].find(btn => btn.textContent.trim().startsWith(filterValue));
            }
            
            if (clickedButton) {
              clickedButton.classList.add('active');
            }
            
            // Custom handler would be injected here
            console.log('Filter changed:', sectionId, filterValue);
          ` : ''}
        }
        
        function loadMoreReviews(sectionId) {
          // Custom handler would be injected here
          console.log('Load more reviews:', sectionId);
        }
      </script>
    </section>
  `;
}

/**
 * Get translations based on locale
 */
function getTranslations(locale) {
  const translations = {
    en: {
      review: 'Review',
      reviews: 'Reviews',
      customerReviews: 'Customer Reviews',
      writeReview: 'Write a Review',
      noReviews: 'No reviews yet. Be the first to review this product!',
      loadMore: 'Load More Reviews',
      sortBy: 'Sort by',
      sortNewest: 'Newest',
      sortOldest: 'Oldest',
      sortHighestRated: 'Highest Rated',
      sortLowestRated: 'Lowest Rated',
      sortMostHelpful: 'Most Helpful',
      allRatings: 'All Ratings',
      verifiedPurchases: 'Verified Purchases',
      withImages: 'With Images'
    },
    ar: {
      review: 'تقييم',
      reviews: 'تقييمات',
      customerReviews: 'تقييمات العملاء',
      writeReview: 'كتابة تقييم',
      noReviews: 'لا توجد تقييمات بعد. كن أول من يقيم هذا المنتج!',
      loadMore: 'تحميل المزيد من التقييمات',
      sortBy: 'ترتيب حسب',
      sortNewest: 'الأحدث',
      sortOldest: 'الأقدم',
      sortHighestRated: 'الأعلى تقييمًا',
      sortLowestRated: 'الأقل تقييمًا',
      sortMostHelpful: 'الأكثر فائدة',
      allRatings: 'جميع التقييمات',
      verifiedPurchases: 'مشتريات موثقة',
      withImages: 'مع الصور'
    },
    fr: {
      review: 'Avis',
      reviews: 'Avis',
      customerReviews: 'Avis des clients',
      writeReview: 'Écrire un avis',
      noReviews: "Aucun avis pour le moment. Soyez le premier à donner votre avis sur ce produit!",
      loadMore: "Charger plus d'avis",
      sortBy: 'Trier par',
      sortNewest: 'Plus récents',
      sortOldest: 'Plus anciens',
      sortHighestRated: 'Mieux notés',
      sortLowestRated: 'Moins bien notés',
      sortMostHelpful: 'Plus utiles',
      allRatings: 'Toutes les notes',
      verifiedPurchases: 'Achats vérifiés',
      withImages: 'Avec images'
    },
    // Add more locales as needed
  };
  
  return translations[locale] || translations['en'];
}

module.exports = ReviewsSection;
