  // Create product options/variants selectors
  let optionsHtml = '';
  if (options && options.length > 0) {
    optionsHtml = options.map(option => {
      const optionId = `${productDetailId}-option-${option.name.toLowerCase().replace(/\s+/g, '-')}`;
      
      let optionControlsHtml = '';
      if (option.type === 'color' || option.type === 'swatch') {
        // Color/swatch selector
        optionControlsHtml = `
          <div class="option-swatches" style="
            display: flex;
            flex-wrap: wrap;
            gap: ${tokens.spacing.sm};
            margin-top: ${tokens.spacing.sm};
          ">
            ${option.values.map((value, idx) => `
              <label 
                for="${optionId}-${idx}"
                class="color-swatch ${value.available === false ? 'disabled' : ''}"
                style="
                  width: 40px;
                  height: 40px;
                  border-radius: 50%;
                  background-color: ${value.color || tokens.colors.neutral.gray[300]};
                  cursor: ${value.available === false ? 'not-allowed' : 'pointer'};
                  position: relative;
                  overflow: hidden;
                  border: 2px solid ${value.selected ? tokens.colors.brand.primary[500] : 'transparent'};
                  opacity: ${value.available === false ? '0.4' : '1'};
                  
                  &:hover {
                    border-color: ${value.available === false ? 'transparent' : tokens.colors.brand.primary[300]};
                  }
                "
              >
                <input 
                  type="radio" 
                  id="${optionId}-${idx}" 
                  name="${optionId}" 
                  value="${value.value}"
                  ${value.selected ? 'checked' : ''}
                  ${value.available === false ? 'disabled' : ''}
                  onchange="updateProductVariant('${productDetailId}', '${option.name}', '${value.value}')"
                  style="
                    opacity: 0;
                    position: absolute;
                    width: 0;
                    height: 0;
                  "
                />
                <span class="swatch-inner" style="
                  display: block;
                  width: 100%;
                  height: 100%;
                  background-image: ${value.image ? `url(${value.image})` : 'none'};
                  background-size: cover;
                  background-position: center;
                "></span>
                <span class="swatch-tooltip" style="
                  position: absolute;
                  bottom: -30px;
                  left: 50%;
                  transform: translateX(-50%);
                  background: ${tokens.colors.neutral.gray[900]};
                  color: white;
                  padding: ${tokens.spacing.xs} ${tokens.spacing.sm};
                  border-radius: ${tokens.borders.borderRadius.sm};
                  font-size: ${tokens.typography.textStyles.bodySmall.fontSize};
                  white-space: nowrap;
                  opacity: 0;
                  visibility: hidden;
                  transition: all 0.2s ease;
                  z-index: 1;
                  pointer-events: none;
                  
                  &::before {
                    content: '';
                    position: absolute;
                    top: -4px;
                    left: 50%;
                    transform: translateX(-50%) rotate(45deg);
                    width: 8px;
                    height: 8px;
                    background: ${tokens.colors.neutral.gray[900]};
                  }
                ">
                  ${value.value}
                </span>
              </label>
            `).join('')}
          </div>
        `;
      } else {
        // Default select dropdown
        optionControlsHtml = `
          <select 
            id="${optionId}"
            class="option-select"
            onchange="updateProductVariant('${productDetailId}', '${option.name}', this.value)"
            style="
              width: 100%;
              padding: ${tokens.spacing.sm} ${tokens.spacing.md};
              border: ${tokens.borders.presets.input.normal};
              border-radius: ${tokens.borders.borderRadius.md};
              margin-top: ${tokens.spacing.sm};
              font-family: inherit;
              appearance: none;
              background-image: url('data:image/svg+xml;utf8,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><polyline points=\"6 9 12 15 18 9\"></polyline></svg>');
              background-repeat: no-repeat;
              background-position: right ${tokens.spacing.md} center;
              background-size: 16px;
            "
          >
            ${option.values.map(value => `
              <option 
                value="${value.value}" 
                ${value.selected ? 'selected' : ''}
                ${value.available === false ? 'disabled' : ''}
              >
                ${value.value} ${value.available === false ? `(${translations.outOfStock})` : ''}
              </option>
            `).join('')}
          </select>
        `;
      }
      
      return `
        <div class="product-option" style="margin-bottom: ${tokens.spacing.md};">
          <label style="
            display: block;
            font-weight: ${tokens.typography.fontWeights.medium};
            margin-bottom: ${tokens.spacing.xs};
          ">
            ${option.name}
          </label>
          ${optionControlsHtml}
        </div>
      `;
    }).join('');
  }
  
  // Create stock indicator
  let stockIndicatorHtml = '';
  if (stockLevel !== undefined) {
    let stockColor = tokens.colors.semantic.success.main;
    let stockText = translations.inStock;
    
    if (stockLevel <= 0) {
      stockColor = tokens.colors.semantic.danger.main;
      stockText = translations.outOfStock;
    } else if (stockLevel < 5) {
      stockColor = tokens.colors.semantic.warning.main;
      stockText = translations.lowStock.replace('{count}', stockLevel);
    }
    
    stockIndicatorHtml = `
      <div class="stock-indicator" style="
        display: flex;
        align-items: center;
        margin-bottom: ${tokens.spacing.md};
      ">
        <div class="stock-dot" style="
          width: 8px;
          height: 8px;
          border-radius: 50%;
          background-color: ${stockColor};
          margin-${dir === 'rtl' ? 'left' : 'right'}: ${tokens.spacing.xs};
        "></div>
        <span style="
          font-size: ${tokens.typography.textStyles.bodySmall.fontSize};
          color: ${stockColor};
        ">
          ${stockText}
        </span>
      </div>
    `;
  } else if (inStock !== undefined) {
    stockIndicatorHtml = `
      <div class="stock-indicator" style="
        display: flex;
        align-items: center;
        margin-bottom: ${tokens.spacing.md};
      ">
        <div class="stock-dot" style="
          width: 8px;
          height: 8px;
          border-radius: 50%;
          background-color: ${inStock ? tokens.colors.semantic.success.main : tokens.colors.semantic.danger.main};
          margin-${dir === 'rtl' ? 'left' : 'right'}: ${tokens.spacing.xs};
        "></div>
        <span style="
          font-size: ${tokens.typography.textStyles.bodySmall.fontSize};
          color: ${inStock ? tokens.colors.semantic.success.main : tokens.colors.semantic.danger.main};
        ">
          ${inStock ? translations.inStock : translations.outOfStock}
        </span>
      </div>
    `;
  }
